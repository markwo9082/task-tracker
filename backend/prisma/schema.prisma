// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum WorkspaceMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum BoardMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

enum TaskPriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  avatarUrl String?  @map("avatar_url")
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ownedWorkspaces     Workspace[]          @relation("WorkspaceOwner")
  workspaceMembers    WorkspaceMember[]
  boardMembers        BoardMember[]
  assignedTasks       TaskAssignee[]
  createdTasks        Task[]               @relation("TaskCreator")
  comments            Comment[]
  attachments         Attachment[]
  notifications       Notification[]
  notificationReaders NotificationReader[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  owner   User                @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members WorkspaceMember[]
  boards  Board[]
  labels  Label[]

  @@map("workspaces")
}

model WorkspaceMember {
  workspaceId String              @map("workspace_id")
  userId      String              @map("user_id")
  role        WorkspaceMemberRole @default(MEMBER)
  joinedAt    DateTime            @default(now()) @map("joined_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([workspaceId, userId])
  @@map("workspace_members")
}

model Board {
  id          String   @id @default(uuid())
  workspaceId String   @map("workspace_id")
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  workspace Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members   BoardMember[]
  lanes     Lane[]
  tasks     Task[]

  @@map("boards")
}

model BoardMember {
  boardId  String          @map("board_id")
  userId   String          @map("user_id")
  role     BoardMemberRole @default(MEMBER)
  joinedAt DateTime        @default(now()) @map("joined_at")

  // Relations
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([boardId, userId])
  @@map("board_members")
}

model Lane {
  id        String   @id @default(uuid())
  boardId   String   @map("board_id")
  name      String
  position  Int
  wipLimit  Int?     @map("wip_limit")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("lanes")
}

model Task {
  id             String       @id @default(uuid())
  boardId        String       @map("board_id")
  laneId         String       @map("lane_id")
  title          String
  description    String?
  priority       TaskPriority @default(MEDIUM)
  dueDate        DateTime?    @map("due_date")
  estimatedHours Float?       @map("estimated_hours")
  position       Int
  createdById    String       @map("created_by_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  board       Board          @relation(fields: [boardId], references: [id], onDelete: Cascade)
  lane        Lane           @relation(fields: [laneId], references: [id], onDelete: Cascade)
  createdBy   User           @relation("TaskCreator", fields: [createdById], references: [id])
  assignees   TaskAssignee[]
  labels      TaskLabel[]
  comments    Comment[]
  attachments Attachment[]
  subtasks    Subtask[]

  @@map("tasks")
}

model TaskAssignee {
  taskId String @map("task_id")
  userId String @map("user_id")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
  @@map("task_assignees")
}

model Label {
  id          String   @id @default(uuid())
  workspaceId String   @map("workspace_id")
  name        String
  color       String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  workspace Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks     TaskLabel[]

  @@map("labels")
}

model TaskLabel {
  taskId  String @map("task_id")
  labelId String @map("label_id")

  // Relations
  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
  @@map("task_labels")
}

model Comment {
  id        String   @id @default(uuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id         String   @id @default(uuid())
  taskId     String   @map("task_id")
  fileName   String   @map("file_name")
  fileUrl    String   @map("file_url")
  fileSize   Int      @map("file_size")
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [uploadedBy], references: [id])

  @@map("attachments")
}

model Subtask {
  id          String   @id @default(uuid())
  taskId      String   @map("task_id")
  title       String
  isCompleted Boolean  @default(false) @map("is_completed")
  position    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String
  message   String
  type      String
  link      String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  readers NotificationReader[]

  @@map("notifications")
}

model NotificationReader {
  notificationId String   @map("notification_id")
  userId         String   @map("user_id")
  readAt         DateTime @default(now()) @map("read_at")

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([notificationId, userId])
  @@map("notification_readers")
}
